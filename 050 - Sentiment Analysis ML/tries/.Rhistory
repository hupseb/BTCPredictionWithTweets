rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, #toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:1200, testSize=1201:1400,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:1200, testSize=1201:1400,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
positive_all = sqlQuery(conn, "SELECT TOP 700 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:600,]
positive_test = positive_all[601:700,]
negative_all = sqlQuery(conn, "SELECT TOP 700 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:600,]
negative_test = negative_all[601:700,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, #toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:1200, testSize=1201:1400,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[1201:1400])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
positive_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:1400,]
positive_test = positive_all[1401:1500,]
negative_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:1400,]
negative_test = negative_all[1401:1500,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, #toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
positive_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:1400,]
positive_test = positive_all[1401:1500,]
negative_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:1400,]
negative_test = negative_all[1401:1500,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, #toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
#"GLMNET", "BOOSTING",
#"SLDA","BAGGING",
#"RF", # "NNET",
#"TREE"))
# test the model
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
positive_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:1400,]
positive_test = positive_all[1401:1500,]
negative_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:1400,]
negative_test = negative_all[1401:1500,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
# the other methods
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, #toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
#"GLMNET", "BOOSTING",
#"SLDA","BAGGING",
#"RF", # "NNET",
#"TREE"))
# test the model
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
positive_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:1400,]
positive_test = positive_all[1401:1500,]
negative_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:1400,]
negative_test = negative_all[1401:1500,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, #toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, #removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
#"GLMNET", "BOOSTING",
#"SLDA","BAGGING",
#"RF", # "NNET",
#"TREE"))
results = classify_models(container, models)
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
positive_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:1400,]
positive_test = positive_all[1401:1500,]
negative_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:1400,]
negative_test = negative_all[1401:1500,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
#"GLMNET", "BOOSTING",
#"SLDA","BAGGING",
#"RF", # "NNET",
#"TREE"))
# test the model
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
positive_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'positive')
ORDER BY NEWID()"
, as.is = TRUE)
positive = positive_all[1:1400,]
positive_test = positive_all[1401:1500,]
negative_all = sqlQuery(conn, "SELECT TOP 1500 [tweet]
FROM dbo.CrowdFlower AS TESTDATA
WHERE (relevant_yn LIKE 'yes') AND (relevant_yn_confidence = 1) AND (sentiment_confidence > 0.6) AND (sentiment LIKE 'negative')
ORDER BY NEWID()"
, as.is = TRUE)
negative = negative_all[1:1400,]
negative_test = negative_all[1401:1500,]
tweet = c(positive, negative)
tweet_test= c(positive_test, negative_test)
tweet_all = c(tweet, tweet_test)
sentiment = c(rep("positive", length(positive) ),
rep("negative", length(negative)))
sentiment_test = c(rep("positive", length(positive_test) ),
rep("negative", length(negative_test)))
sentiment_all = as.factor(c(sentiment, sentiment_test))
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, removeSparseTerms=0.999,
stemWords=FALSE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
# test the model
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, removeSparseTerms=0.999,
stemWords=TRUE, tm::weightTfIdf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
#"GLMNET", "BOOSTING",
#"SLDA","BAGGING",
#"RF", # "NNET",
#"TREE"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
mat= create_matrix(tweet_all, language="english",
removeStopwords=TRUE, removeNumbers=TRUE, removePunctuation=TRUE, toLower=TRUE, removeSparseTerms=0.999,
stemWords=TRUE, tm::weightTf)
container = create_container(mat, as.numeric(sentiment_all),
trainSize=1:2800, testSize=2801:3000,virgin=FALSE)
models = train_models(container, algorithms=c("MAXENT",
"SVM"))
results = classify_models(container, models)
table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
recall_accuracy(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"])
confusionMatrix(table(as.numeric(as.numeric(sentiment_all[2801:3000])), results[,"SVM_LABEL"]))
analytics = create_analytics(container, results)
summary(analytics)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
iphonex.raw <- sqlQuery(conn, "SELECT [status_id]
,[created_at]
,[screen_name]
,[tweet]
,[sentiment] AS cf_sentiment
FROM [iPhoneXReleaseTweets].[dbo].[CrowdFlower]
WHERE (relevant_yn LIKE 'yes' AND relevant_yn_confidence = 1) AND (sentiment_confidence = 1)
AND (sentiment LIKE 'positive' OR sentiment LIKE 'negative')", as.is = TRUE)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
iphonex.raw <- sqlQuery(conn, "SELECT [status_id]
,[created_at]
,[screen_name]
,[tweet]
,[sentiment] AS cf_sentiment
FROM [iPhoneXReleaseTweets].[dbo].[CrowdFlower]
WHERE (relevant_yn LIKE 'yes' AND relevant_yn_confidence = 1) AND (sentiment_confidence = 1)
AND (sentiment LIKE 'positive' OR sentiment LIKE 'negative')", as.is = TRUE)
onn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
iphonex.raw <- sqlQuery(conn, "SELECT [status_id]
,[created_at]
,[screen_name]
,[tweet]
,[sentiment] AS cf_sentiment
FROM [iPhoneXReleaseTweets].[dbo].[CrowdFlower]
WHERE (relevant_yn LIKE 'yes' AND relevant_yn_confidence = 1) AND (sentiment_confidence = 1) AND ([sentiment] LIKE 'positive' OR [sentiment] LIKE 'negative')", as.is = TRUE)
#---------
install.packages(c("ggplot2", "e1071", "caret", "quanteda", "irlba", "randomForest", "jsonlite", "RODBC", "wordcloud", "sentimentr", "magrittr", "dplyr", "pacman"))
library("RODBC")
library("devtools")
library("sentimentr")
library("magrittr")
options(scipen = 999)
iphonex.sentenced <- iphonex.raw %>%
get_sentences(iphonex.raw$tweet)
dict <- as_key(syuzhet:::bing)
#dict <- nrc
sentimentr_sentiword <- function() sentiment(iphonex.sentenced, dict)
dat <- sentimentr_sentiword()
fullaggregated <- aggregate(list(sentimentr_syuzhet_dict = dat$sentiment), by=list(element_id=dat$element_id), FUN=sum)
aggregated <- aggregate(sentiment ~ element_id + status_id + created_at + screen_name + cf_sentiment, dat, sum)
View(merge(fullaggregated, dat))
View(aggregated)
senticonv <- function(x) {
switch(x,
'positive' = 1,
'neutral' = 0,
'negative' = -1,
as.character(x)
)
}
accuracy <- function(sa, sb) {
if ((sa > 0 && sb > 0) || (sa < 0 && sb < 0) || (sa == 0 && sb == 0)) {
return(1)
}
else {
return(0)
}
}
aggregated$cf_sentiment_val <- sapply(aggregated$cf_sentiment, senticonv)
aggregated$acc <- mapply(accuracy,aggregated$sentiment,aggregated$cf_sentiment_val)
aggregated <- aggregated[order(aggregated$sentiment, decreasing=FALSE),]
View(aggregated)
sum(aggregated$acc)
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=iPhoneXReleaseTweets;trusted_connection=true')
iphonex.raw <- sqlQuery(conn, "SELECT [status_id]
,[created_at]
,[screen_name]
,[tweet]
,[sentiment] AS cf_sentiment
FROM [iPhoneXReleaseTweets].[dbo].[CrowdFlower]
WHERE (relevant_yn LIKE 'yes' AND relevant_yn_confidence = 1) AND (sentiment_confidence = 1) AND ([sentiment] LIKE 'positive' OR [sentiment] LIKE 'negative')", as.is = TRUE)
#-------------------------------------------------------------------------------------------------------------
iphonex.sentenced <- iphonex.raw %>%
get_sentences(iphonex.raw$tweet)
iphonex.raw
syuzhet:::bing
sentimentr_sentiword <- function() sentiment(iphonex.sentenced, dict)
dat <- sentimentr_sentiword()
fullaggregated <- aggregate(list(sentimentr_syuzhet_dict = dat$sentiment), by=list(element_id=dat$element_id), FUN=sum)
aggregated <- aggregate(sentiment ~ element_id + status_id + created_at + screen_name + cf_sentiment, dat, sum)
View(merge(fullaggregated, dat))
View(aggregated)
View(aggregated)
senticonv <- function(x) {
switch(x,
'positive' = 1,
'neutral' = 0,
'negative' = -1,
as.character(x)
)
}
accuracy <- function(sa, sb) {
if ((sa > 0 && sb > 0) || (sa < 0 && sb < 0) || (sa == 0 && sb == 0)) {
return(1)
}
else {
return(0)
}
}
aggregated$cf_sentiment_val <- sapply(aggregated$cf_sentiment, senticonv)
aggregated$acc <- mapply(accuracy,aggregated$sentiment,aggregated$cf_sentiment_val)
aggregated <- aggregated[order(aggregated$sentiment, decreasing=FALSE),]
View(aggregated)
sum(aggregated$acc)
dict <- as_key(syuzhet:::afinn)
sentimentr_sentiword <- function() sentiment(iphonex.sentenced, dict)
dat <- sentimentr_sentiword()
fullaggregated <- aggregate(list(sentimentr_syuzhet_dict = dat$sentiment), by=list(element_id=dat$element_id), FUN=sum)
aggregated <- aggregate(sentiment ~ element_id + status_id + created_at + screen_name + cf_sentiment, dat, sum)
View(merge(fullaggregated, dat))
aggregated$cf_sentiment_val <- sapply(aggregated$cf_sentiment, senticonv)
aggregated$acc <- mapply(accuracy,aggregated$sentiment,aggregated$cf_sentiment_val)
aggregated <- aggregated[order(aggregated$sentiment, decreasing=FALSE),]
View(aggregated)
sum(aggregated$acc)
dict <- nrc
nrc <- data.frame(
words = rownames(syuzhet:::nrc),
polarity = syuzhet:::nrc[, "positive"] - syuzhet:::nrc[, "negative"],
stringsAsFactors = FALSE
) %>%
{as_key(.[.[["polarity"]] != 0, ])}
dict <- nrc
sentimentr_sentiword <- function() sentiment(iphonex.sentenced, dict)
dat <- sentimentr_sentiword()
fullaggregated <- aggregate(list(sentimentr_syuzhet_dict = dat$sentiment), by=list(element_id=dat$element_id), FUN=sum)
aggregated <- aggregate(sentiment ~ element_id + status_id + created_at + screen_name + cf_sentiment, dat, sum)
View(merge(fullaggregated, dat))
View(aggregated)
aggregated$cf_sentiment_val <- sapply(aggregated$cf_sentiment, senticonv)
aggregated$acc <- mapply(accuracy,aggregated$sentiment,aggregated$cf_sentiment_val)
aggregated <- aggregated[order(aggregated$sentiment, decreasing=FALSE),]
View(aggregated)
sum(aggregated$acc)
dict <- as_key(syuzhet:::syuzhet_dict)
sentimentr_sentiword <- function() sentiment(iphonex.sentenced, dict)
dat <- sentimentr_sentiword()
fullaggregated <- aggregate(list(sentimentr_syuzhet_dict = dat$sentiment), by=list(element_id=dat$element_id), FUN=sum)
aggregated <- aggregate(sentiment ~ element_id + status_id + created_at + screen_name + cf_sentiment, dat, sum)
View(merge(fullaggregated, dat))
View(aggregated)
aggregated$cf_sentiment_val <- sapply(aggregated$cf_sentiment, senticonv)
aggregated$acc <- mapply(accuracy,aggregated$sentiment,aggregated$cf_sentiment_val)
aggregated <- aggregated[order(aggregated$sentiment, decreasing=FALSE),]
View(aggregated)
sum(aggregated$acc)
setwd("C:/Users/hupse/OneDrive/Master thesis/050 - ML/6200 - 0.66 - 620")
install.packages(c("BH", "bindr", "bindrcpp", "bit", "broom", "caret", "caTools", "crul", "curl", "CVST", "data.table", "DBI", "ddalpha", "devtools", "digest", "doSNOW", "dplyr", "DRR", "e1071", "english", "foreach", "ggplot2", "git2r", "glmnet", "glue", "hms", "httpuv", "hunspell", "ipred", "irlba", "iterators", "kernlab", "lava", "lazyeval", "lexicon", "lubridate", "mime", "ModelMetrics", "munsell", "openssl", "pkgconfig", "plogr", "prodlim", "psych", "purrr", "quanteda", "R6", "randomForest", "ranger", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppRoll", "RCurl", "recipes", "reshape2", "reticulate", "rJava", "rjson", "rlang", "robustbase", "RSpectra", "rstudioapi", "rtweet", "scales", "sentimentr", "sfsmisc", "slam", "snow", "spacyr", "stringi", "stringr", "syuzhet", "textclean", "textshape", "tibble", "tidyr", "tidyselect", "tidytext", "timeDate", "tm", "tokenizers", "tree", "urltools", "viridisLite", "withr", "wordcloud", "XML", "xml2", "yaml", "zoo"))
