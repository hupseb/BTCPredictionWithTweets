options(scipen=999)
Sys.setenv(TZ='UTC')
library("forecast")
library("mgcv")
library("RODBC")
library("httpuv")
library("xts")
library("plyr")
library("GGally")
library("fpp2")
library("stringi")
library("gridExtra")
library("timeDate")
#get figure eight results
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=BitcoinTwts;trusted_connection=true')
btcTwts = sqlQuery(conn, paste("SELECT A.[status_id]
,A.[decisionValue] AS sentiment
,B.[user_id]
,B.[created_at]
,B.favorite_count
,B.retweet_count
FROM [BitcoinTwts].[dbo].[Final_SVM_sentiment] AS A
INNER JOIN [BitcoinTwts].[dbo].[BitcoinTweetsUnion_Filtered_FinalInterval] AS B ON A.[status_id] = B.[status_id]
ORDER BY B.[created_at]"), as.is = TRUE)
odbcClose(conn)
#get amount of tweets
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=BitcoinAnalysis;trusted_connection=true')
query = sprintf("SELECT * FROM [BitcoinAnalysis].[dbo].[06. TwitterVolume_d]
WHERE [date] >= Convert(datetime2, '2018-01-28 00:00:00.000' ) AND
[date] <  Convert(datetime2, '2018-06-10 00:00:00.000' )")
twtCnt <- sqlQuery(conn, query, errors = TRUE, as.is=T)
odbcClose(conn)
#get bitcoin price
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=BitcoinAnalysis;trusted_connection=true')
query = sprintf("SELECT * FROM [BitcoinAnalysis].[dbo].[01. Bitfinex_C_TradingView_d]
WHERE [timestamp] >= Convert(datetime2, '2018-01-28 00:00:00.000' ) AND
[timestamp] <  Convert(datetime2, '2018-06-10 00:00:00.000' )")
btcPrice <- sqlQuery(conn, query, errors = TRUE, as.is=T)
odbcClose(conn)
btcTwts$created_at_date <- as.Date(btcTwts$created_at, "%Y-%m-%d")
btcTwts$sentiment_str <- btcTwts$sentiment
btcTwts$sentiment <- as.numeric(btcTwts$sentiment)
#aggregate to daily
sentiment_raw <- aggregate(x = srS[c("sentiment")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_pos <- aggregate(x = srS[c("sentiment_pos")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_neg <- aggregate(x = srS[c("sentiment_neg")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_neu <- aggregate(x = srS[c("sentiment_neu")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_pos_amp <- aggregate(x = srS[c("sentiment_pos_amp")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_neg_amp <- aggregate(x = srS[c("sentiment_neg_amp")],FUN = sum, by = list(date = srS$created_at_date))
srS <- btcTwts %>% mutate(sentiment_pos = ifelse(btcTwts$sentiment > 0, 1, 0))
srS <- srS %>% mutate(sentiment_neg = ifelse(srS$sentiment < 0, -1,0))
srS <- srS %>% mutate(sentiment_neu = ifelse(srS$sentiment == 0, 1,0))
srS <- srS %>% mutate(sentiment_pos_amp = ifelse((srS$sentiment_pos == 1 & srS$favorite_count > 0),
srS$sentiment*(srS$favorite_count+1),
(ifelse((srS$sentiment_pos == 1 & srS$favorite_count == 0),
1*srS$sentiment,
0))))
srS <- srS %>% mutate(sentiment_neg_amp = ifelse((srS$sentiment_neg == -1 & srS$favorite_count > 0),
srS$sentiment*(srS$favorite_count+1),
(ifelse((srS$sentiment_neg == -1 & srS$favorite_count == 0),
1*srS$sentiment,
0))))
#aggregate to daily
sentiment_raw <- aggregate(x = srS[c("sentiment")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_pos <- aggregate(x = srS[c("sentiment_pos")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_neg <- aggregate(x = srS[c("sentiment_neg")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_neu <- aggregate(x = srS[c("sentiment_neu")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_pos_amp <- aggregate(x = srS[c("sentiment_pos_amp")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_neg_amp <- aggregate(x = srS[c("sentiment_neg_amp")],FUN = sum, by = list(date = srS$created_at_date))
sentiment_npr <- sentiment_pos
colnames(sentiment_npr) <- c('date','sentiment_npr')
sentiment_npr[,2] <- ((sentiment_pos[,2]-(sentiment_neg[,2]*-1))/(sentiment_pos[,2]+(sentiment_neg[,2]*-1)))
sentiment_npr_amp <- sentiment_pos_amp
colnames(sentiment_npr_amp) <- c('date','sentiment_npr_amp')
sentiment_npr_amp[,2] <- ((sentiment_pos_amp[,2]-(sentiment_neg_amp[,2]*-1))/(sentiment_pos_amp[,2]+(sentiment_neg_amp[,2]*-1)))
sentiment_npnr <- sentiment_neu
colnames(sentiment_npnr) <- c('date','sentiment_npnr')
sentiment_npnr[,2] <- ((sentiment_pos[,2]-sentiment_neg[,2]*-1)/(sentiment_pos[,2]+sentiment_neg[,2]*-1+sentiment_neu[,2]))
sentiment_sum_pos_neg <- sentiment_pos
colnames(sentiment_sum_pos_neg) <- c('date','sentiment_sum_pos_neg')
sentiment_sum_pos_neg[,2] <- (sentiment_pos[,2] + sentiment_neg[,2])
sentiment_npr_alt <- sentiment_pos
colnames(sentiment_npr_alt) <- c('date','sentiment_npr_alt')
sentiment_npr_alt[,2] <- ifelse(sentiment_pos[,2] < (sentiment_neg[,2]*-1), -1*((sentiment_neg[,2]*-1)/sentiment_pos[,2]),
ifelse(sentiment_pos[,2] > (sentiment_neg[,2]*-1), sentiment_pos[,2]/(sentiment_neg[,2]*-1), 0))
#prepare df objects for xts conversion
twtCnt[,1] <- as.Date(twtCnt[,1])
colnames(twtCnt) <- c("date","amount")
btcPriceDf <- data.frame(as.Date(btcPrice[,1]),as.numeric(btcPrice[,5]))
colnames(btcPriceDf) <- c("date","Close")
#convert to xts
xts_sentiment_raw <- xts(sentiment_raw[,2], order.by = as.Date(sentiment_raw[,1]))
xts_sentiment_pos <- xts(sentiment_pos[,2], order.by = as.Date(sentiment_pos[,1]))
xts_sentiment_neg <- xts(sentiment_neg[,2], order.by = as.Date(sentiment_neg[,1]))
xts_sentiment_pos_amp <- xts(sentiment_pos_amp[,2], order.by = as.Date(sentiment_pos_amp[,1]))
xts_sentiment_neg_amp <- xts(sentiment_neg_amp[,2], order.by = as.Date(sentiment_neg_amp[,1]))
xts_sentiment_npr <- xts(sentiment_npr[,2], order.by = as.Date(sentiment_npr[,1]))
xts_sentiment_npr_amp <- xts(sentiment_npr_amp[,2], order.by = as.Date(sentiment_npr_amp[,1]))
xts_sentiment_npnr <- xts(sentiment_npnr[,2], order.by = as.Date(sentiment_npnr[,1]))
xts_sentiment_sum_pos_neg <- xts(sentiment_sum_pos_neg[,2], order.by = as.Date(sentiment_sum_pos_neg[,1]))
xts_sentiment_npr_alt <- xts(sentiment_npr_alt[,2], order.by = as.Date(sentiment_npr_alt[,1]))
xts_TwtCnt <- xts(twtCnt[,2], order.by = as.Date(twtCnt[,1]))
xts_BtcPrice <- xts(btcPriceDf[,2], order.by = as.Date(btcPriceDf[,1]))
#get other timeseries for bitcoin
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=BitcoinAnalysis;trusted_connection=true')
query = sprintf("/****** Script for SelectTopNRows command from SSMS  ******/
SELECT [Date]
,[Annual_Hash_Growth]
,[Blockchain_Size]
,[Block_Height]
,[Block_Interval]
,[Daily_Blocks]
,[Block_Size]
,[Chain_Value_Density]
,[Daily_Transactions]
,[Difficulty]
,[Fee_Percentage]
,[Fee_Rate]
,[Hash_Rate]
,[Two_Week_Hash_Growth]
,[Market_Capitalization]
,[Metcalfe_s_Law___TX]
,[Metcalfe_s_Law___UTXO]
,[Miner_Revenue]
,[Miner_Revenue_Value]
,[Money_Supply]
,[Output_Value]
,[Output_Volume]
,[Bitcoin_Core__BTC__Price]
,[Quarterly_Hash_Growth]
,[Total_Transactions]
,[Transaction_Amount]
,[Transaction_Fees]
,[Fees_Value]
,[Transaction_Size]
,[Transactions_per_Block]
,[Transaction_Value]
,[Avg__UTXO_Amount]
,[UTXO_Growth]
,[UTXO_Set_Size]
,[Avg__UTXO_Value]
,[Velocity_of_Money]
,[Velocity___Quarterly]
,[Velocity___Daily]
FROM [BitcoinAnalysis].[dbo].[15xx_BTC_technical_ts]
WHERE ([Date] >= CONVERT(datetime2, '2018-01-28 00:00:00.000')) AND ([Date] < CONVERT(datetime2, '2018-06-10 00:00:00.000'))
ORDER BY [Date]")
btc_technical_ts <- sqlQuery(conn, query, errors = TRUE, as.is=T)
btc_ts <- btc_technical_ts
odbcClose(conn)
#adjustments
btc_ts[,c(2,3,8,10,11,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,31,32,35,36,37,38)] <-
sapply(btc_ts[,c(2,3,8,10,11,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,31,32,35,36,37,38)], as.numeric)
#add other time series
#get other timeseries for bitcoin
conn <- odbcDriverConnect('driver={SQL Server};server=localhost\\SQLEXPRESS;database=BitcoinAnalysis;trusted_connection=true')
query = sprintf("/****** Script for SelectTopNRows command from SSMS  ******/
SELECT [Date]
,[volatility]
,[shorts]
,[longs]
,[stockpulse_sent]
,[stockpulse_buzz]
,[sp500]
FROM [BitcoinAnalysis].[dbo].[0x_mutual_ts]
WHERE ([Date] >= CONVERT(datetime2, '2018-01-28 00:00:00.000')) AND ([Date] < CONVERT(datetime2, '2018-06-10 00:00:00.000'))
ORDER BY [Date]")
btc_mutual_ts <- sqlQuery(conn, query, errors = TRUE, as.is=T)
odbcClose(conn)
#adjustments
btc_mutual_ts[,c(2,3,4,5,6,7)] <- sapply(btc_mutual_ts[,c(2,3,4,5,6,7)], as.numeric)
#add to btc_ts
btc_ts$volatility <- btc_mutual_ts$volatility
btc_ts$shorts <- btc_mutual_ts$shorts
btc_ts$longs  <- btc_mutual_ts$longs
btc_ts$stockpulse_sent <- btc_mutual_ts$stockpulse_sent
btc_ts$stockpulse_buzz <- btc_mutual_ts$stockpulse_buzz
btc_ts$sp500 <- btc_mutual_ts$sp500
#add tweet time series
btc_ts$SVM_sentiment_neg <- as.ts(xts_sentiment_neg)
btc_ts$SVM_sentiment_neg_amp <- as.ts(xts_sentiment_neg_amp)
btc_ts$SVM_sentiment_npnr <- as.ts(xts_sentiment_npnr)
btc_ts$SVM_sentiment_npr <- as.ts(xts_sentiment_npr)
btc_ts$SVM_sentiment_npr_alt <- as.ts(xts_sentiment_npr_alt)
btc_ts$SVM_sentiment_npr_amp <- as.ts(xts_sentiment_npr_amp)
btc_ts$SVM_sentiment_pos <- as.ts(xts_sentiment_pos)
btc_ts$SVM_sentiment_pos_amp <- as.ts(xts_sentiment_pos_amp)
btc_ts$SVM_sentiment_raw <- as.ts(xts_sentiment_raw)
btc_ts$SVM_sentiment_sum_pos_neg <- as.ts(xts_sentiment_sum_pos_neg)
#add tweet counts
btc_ts$TwtCnt <- as.ts(xts_TwtCnt)
cur_30 <- xts(btc_ts[,"SVM_sentiment_npnr"], order.by = as.Date(btc_ts[,1]))
cur_31 <- xts(btc_ts[,"SVM_sentiment_npr"], order.by = as.Date(btc_ts[,1]))
cur_32 <- xts(btc_ts[,"SVM_sentiment_npr_alt"], order.by = as.Date(btc_ts[,1]))
cur_33 <- xts(btc_ts[,"SVM_sentiment_raw"], order.by = as.Date(btc_ts[,1]))
cur_34 <- xts(btc_ts[,"SVM_sentiment_sum_pos_neg"], order.by = as.Date(btc_ts[,1]))
cur_35 <- xts(btc_ts[,"SVM_sentiment_neg"], order.by = as.Date(btc_ts[,1]))
cur_36 <- xts(btc_ts[,"shorts"], order.by = as.Date(btc_ts[,1]))
cur_37 <- xts(btc_ts[,"Avg__UTXO_Value"], order.by = as.Date(btc_ts[,1]))
cur_38 <- xts(btc_ts[,"SVM_sentiment_neg_amp"], order.by = as.Date(btc_ts[,1]))
cur_39 <- xts(btc_ts[,"Metcalfe_s_Law___UTXO"], order.by = as.Date(btc_ts[,1]))
cur_40 <- xts(btc_ts[,"Annual_Hash_Growth"], order.by = as.Date(btc_ts[,1]))
cur_41 <- xts(btc_ts[,"Quarterly_Hash_Growth"], order.by = as.Date(btc_ts[,1]))
cur_42 <- xts(btc_ts[,"sp500"], order.by = as.Date(btc_ts[,1]))
cur_43 <- xts(btc_ts[,"SVM_sentiment_npr_amp"], order.by = as.Date(btc_ts[,1]))
cur_44 <- xts(btc_ts[,"Metcalfe_s_Law___TX"], order.by = as.Date(btc_ts[,1]))
cur_45 <- xts(btc_ts[,"Velocity_of_Money"], order.by = as.Date(btc_ts[,1]))
cur_46 <- xts(btc_ts[,"Two_Week_Hash_Growth"], order.by = as.Date(btc_ts[,1]))
cur_47 <- xts(btc_ts[,"TwtCnt"], order.by = as.Date(btc_ts[,1]))
cur_48 <- xts(btc_ts[,"SVM_sentiment_pos"], order.by = as.Date(btc_ts[,1]))
cur_49 <- xts(btc_ts[,"Daily_Transactions"], order.by = as.Date(btc_ts[,1]))
cur_50 <- xts(btc_ts[,"Total_Transactions"], order.by = as.Date(btc_ts[,1]))
cur_51 <- xts(btc_ts[,"volatility"], order.by = as.Date(btc_ts[,1]))
cur_52 <- xts(btc_ts[,"stockpulse_buzz"], order.by = as.Date(btc_ts[,1]))
cur_53 <- xts(btc_ts[,"UTXO_Growth"], order.by = as.Date(btc_ts[,1]))
cur_54 <- xts(btc_ts[,"Daily_Blocks"], order.by = as.Date(btc_ts[,1]))
cur_55 <- xts(btc_ts[,"Block_Interval"], order.by = as.Date(btc_ts[,1]))
cur_56 <- xts(btc_ts[,"Miner_Revenue"], order.by = as.Date(btc_ts[,1]))
cur_57 <- xts(btc_ts[,"Fee_Percentage"], order.by = as.Date(btc_ts[,1]))
cur_58 <- xts(btc_ts[,"Miner_Revenue_Value"], order.by = as.Date(btc_ts[,1]))
cur_59 <- xts(btc_ts[,"stockpulse_sent"], order.by = as.Date(btc_ts[,1]))
cur_60 <- xts(btc_ts[,"Market_Capitalization"], order.by = as.Date(btc_ts[,1]))
cur_61 <- xts(btc_ts[,"Hash_Rate"], order.by = as.Date(btc_ts[,1]))
cur_62 <- xts(btc_ts[,"Bitcoin_Core__BTC__Price"], order.by = as.Date(btc_ts[,1]))
cur_63 <- xts(btc_ts[,"Difficulty"], order.by = as.Date(btc_ts[,1]))
cur_64 <- xts(btc_ts[,"Chain_Value_Density"], order.by = as.Date(btc_ts[,1]))
cur_65 <- xts(btc_ts[,"Output_Value"], order.by = as.Date(btc_ts[,1]))
cur_66 <- xts(btc_ts[,"Velocity___Quarterly"], order.by = as.Date(btc_ts[,1]))
cur_67 <- xts(btc_ts[,"Transactions_per_Block"], order.by = as.Date(btc_ts[,1]))
cur_68 <- xts(btc_ts[,"Transaction_Value"], order.by = as.Date(btc_ts[,1]))
cur_69 <- xts(btc_ts[,"Transaction_Amount"], order.by = as.Date(btc_ts[,1]))
cur_70 <- xts(btc_ts[,"Block_Size"], order.by = as.Date(btc_ts[,1]))
cur_71 <- xts(btc_ts[,"Blockchain_Size"], order.by = as.Date(btc_ts[,1]))
cur_72 <- xts(btc_ts[,"Velocity___Daily"], order.by = as.Date(btc_ts[,1]))
cur_73 <- xts(btc_ts[,"Transaction_Size"], order.by = as.Date(btc_ts[,1]))
cur_74 <- xts(btc_ts[,"Transaction_Fees"], order.by = as.Date(btc_ts[,1]))
cur_75 <- xts(btc_ts[,"longs"], order.by = as.Date(btc_ts[,1]))
cur_76 <- xts(btc_ts[,"Fees_Value"], order.by = as.Date(btc_ts[,1]))
cur_77 <- xts(btc_ts[,"Fee_Rate"], order.by = as.Date(btc_ts[,1]))
cur_78 <- xts(btc_ts[,"SVM_sentiment_pos_amp"], order.by = as.Date(btc_ts[,1]))
cur_79 <- xts(btc_ts[,"Money_Supply"], order.by = as.Date(btc_ts[,1]))
cur_80 <- xts(btc_ts[,"Block_Height"], order.by = as.Date(btc_ts[,1]))
cur_81 <- xts(btc_ts[,"UTXO_Set_Size"], order.by = as.Date(btc_ts[,1]))
cur_82 <- xts(btc_ts[,"Avg__UTXO_Amount"], order.by = as.Date(btc_ts[,1]))
#1st day - 2018-01-29 - Monday
#diff_constant is one
dc <- 1
n <- 1
profit_dfs <- list();
profit_res <- data.frame(profit_dfs_nr=integer(),
profit=double(),
arima_size=integer(),
forecast_days=integer(),
window_week_start_day=integer(),
first_forecast_date=character(),
last_forecast_date=character(),
twitter_sent_regs=logical(),
btc_tec_regs=logical())
for(i in seq(50, 120, by = 3)) {
for(j in seq(1, 7, by = 1)) {
for(k in seq(1, length(regsets), by = 1)) {
regsetname <- names(regsets[k])
regset <- regsets[[regsetname]]
#do rolling forecast for 20 days
data <- seq(0,0,length.out=20)
dates <- seq(as.Date(index(xts_BtcPrice[(j+dc+i)-20+1,])),length=20,by="days")
fc_xts <- xts(x=data, order.by=dates)
for (l in 20:1) {
start <- j+dc+(20-l)
end <- start+(i-20)
if(!is.null(regset)){
fit.btcPrice.best <- Arima(xts_BtcPrice[start:end], order=c(2,2,0), xreg=regset[start:end,])
#fit.btcPrice.best <- auto.arima(xts_BtcPrice[start:end], xreg=regset[start:end,])
}else{
fit.btcPrice.best <- Arima(xts_BtcPrice[start:end], order=c(2,2,0))
#fit.btcPrice.best <- auto.arima(xts_BtcPrice[start:end], stepwise=FALSE, approx=FALSE, d=1, ic="bic")
}
#forecast each regressor variable
if(!is.null(regset)){
regset_fcs <- list()
for(m in seq(1, ncol(regset), by = 1)) {
reg <- regset[,m]
#print(paste0("forecast for regressor: ", names(regset[m])))
fc_reg <- forecast(auto.arima(reg[start:end],stepwise=FALSE, approx=FALSE), h=1)
#print(fc_reg[["mean"]][1])
#save forecast of regressors variables to dataframe
regset_fcs[[names(regset[m])]] <- fc_reg[["mean"]][1]
}
}
#retrieve current day forecast with dataframe
if(!is.null(regset)){
fc <- forecast(fit.btcPrice.best, h=1, xreg=as.data.frame(regset_fcs))
}else{
fc <- forecast(fit.btcPrice.best, h=1)
}
#add to timeseries for all 20 forecasts
fc_day <- index(xts_BtcPrice[end + 1,])
fc_xts[fc_day] <- fc[["mean"]][1]
print("---------------------------------------------------------------")
print(paste0("regset name: ", regsetname))
print(paste0("window size: ", i))
print(paste0("week day:    ", j))
print(paste0("ARIMA start: ", start))
print(paste0("ARIMA end  : ", end))
start_str <- paste0(index(xts_BtcPrice[start,]), " ARIMA start")
end_str <- paste0(index(xts_BtcPrice[end,]), " ARIMA end")
print(start_str)
print(end_str)
fc_day_str <- paste0(fc_day, " forecast: ")
print(paste0(fc_day_str, fc[["mean"]][1]))
print(dates)
print("---------------------------------------------------------------")
}
#calculate profit like in excel sheet
btc_prices <- xts_BtcPrice[index(fc_xts)]
xts_BtcPrice_lagged <- stats::lag(xts_BtcPrice,1)
btc_prices_lag1 <- xts_BtcPrice_lagged[index(fc_xts)]
fc_differences <- fc_xts - btc_prices_lag1
btc_lastday_differences <- btc_prices - btc_prices_lag1
fc_differences_smaller_0 <- fc_differences < 0
btc_lastday_differences_smaller_0 <- btc_lastday_differences < 0
direction_ok <- fc_differences_smaller_0 == btc_lastday_differences_smaller_0
win <- abs(btc_lastday_differences) * direction_ok
no_win <- win == 0
lose <- abs(btc_lastday_differences) * no_win
profit_df <- merge(btc_prices,
btc_prices_lag1,
fc_xts,fc_differences,
btc_lastday_differences,
fc_differences_smaller_0,
btc_lastday_differences_smaller_0,
direction_ok,
win,
lose)
#save profit result in table for ANOVA
profit_res <- rbind(profit_res, data.frame(profit_dfs_nr=n,
profit=sum(profit_df$win) - sum(profit_df$lose),
arima_size=i-20,
forecast_days=20,
window_week_start_day=j,
first_forecast_date=as.character(index(first(profit_df))),
last_forecast_date=as.character(index(last(profit_df))),
twitter_sent_regs=regsetname == "Best Twitter Sentiment" || regsetname == "Best Technical Predictors + Best Twitter Sentiment",
btc_tec_regs=regsetname == "Best Technical Predictors" || regsetname == "Best Technical Predictors + Best Twitter Sentiment"))
profit_dfs[[n]] <- profit_df
n <- n + 1
}
}
}
#create regression sets
regsets <- list(NULL,
data.frame(
cur_31
))
names(regsets) <- c( "No Regressors", "Best Twitter Sentiment")
#add more regression sets
regsets[["Best Technical Predictors"]] <- data.frame(
cur_36
)
regsets[["Best Technical Predictors + Best Twitter Sentiment"]] <- data.frame(
cur_31,
cur_36
)
#1st day - 2018-01-29 - Monday
#diff_constant is one
dc <- 1
n <- 1
profit_dfs <- list();
profit_res <- data.frame(profit_dfs_nr=integer(),
profit=double(),
arima_size=integer(),
forecast_days=integer(),
window_week_start_day=integer(),
first_forecast_date=character(),
last_forecast_date=character(),
twitter_sent_regs=logical(),
btc_tec_regs=logical())
for(i in seq(50, 120, by = 3)) {
for(j in seq(1, 7, by = 1)) {
for(k in seq(1, length(regsets), by = 1)) {
regsetname <- names(regsets[k])
regset <- regsets[[regsetname]]
#do rolling forecast for 20 days
data <- seq(0,0,length.out=20)
dates <- seq(as.Date(index(xts_BtcPrice[(j+dc+i)-20+1,])),length=20,by="days")
fc_xts <- xts(x=data, order.by=dates)
for (l in 20:1) {
start <- j+dc+(20-l)
end <- start+(i-20)
if(!is.null(regset)){
fit.btcPrice.best <- Arima(xts_BtcPrice[start:end], order=c(2,2,0), xreg=regset[start:end,])
#fit.btcPrice.best <- auto.arima(xts_BtcPrice[start:end], xreg=regset[start:end,])
}else{
fit.btcPrice.best <- Arima(xts_BtcPrice[start:end], order=c(2,2,0))
#fit.btcPrice.best <- auto.arima(xts_BtcPrice[start:end], stepwise=FALSE, approx=FALSE, d=1, ic="bic")
}
#forecast each regressor variable
if(!is.null(regset)){
regset_fcs <- list()
for(m in seq(1, ncol(regset), by = 1)) {
reg <- regset[,m]
#print(paste0("forecast for regressor: ", names(regset[m])))
fc_reg <- forecast(auto.arima(reg[start:end],stepwise=FALSE, approx=FALSE), h=1)
#print(fc_reg[["mean"]][1])
#save forecast of regressors variables to dataframe
regset_fcs[[names(regset[m])]] <- fc_reg[["mean"]][1]
}
}
#retrieve current day forecast with dataframe
if(!is.null(regset)){
fc <- forecast(fit.btcPrice.best, h=1, xreg=as.data.frame(regset_fcs))
}else{
fc <- forecast(fit.btcPrice.best, h=1)
}
#add to timeseries for all 20 forecasts
fc_day <- index(xts_BtcPrice[end + 1,])
fc_xts[fc_day] <- fc[["mean"]][1]
print("---------------------------------------------------------------")
print(paste0("regset name: ", regsetname))
print(paste0("window size: ", i))
print(paste0("week day:    ", j))
print(paste0("ARIMA start: ", start))
print(paste0("ARIMA end  : ", end))
start_str <- paste0(index(xts_BtcPrice[start,]), " ARIMA start")
end_str <- paste0(index(xts_BtcPrice[end,]), " ARIMA end")
print(start_str)
print(end_str)
fc_day_str <- paste0(fc_day, " forecast: ")
print(paste0(fc_day_str, fc[["mean"]][1]))
print(dates)
print("---------------------------------------------------------------")
}
#calculate profit like in excel sheet
btc_prices <- xts_BtcPrice[index(fc_xts)]
xts_BtcPrice_lagged <- stats::lag(xts_BtcPrice,1)
btc_prices_lag1 <- xts_BtcPrice_lagged[index(fc_xts)]
fc_differences <- fc_xts - btc_prices_lag1
btc_lastday_differences <- btc_prices - btc_prices_lag1
fc_differences_smaller_0 <- fc_differences < 0
btc_lastday_differences_smaller_0 <- btc_lastday_differences < 0
direction_ok <- fc_differences_smaller_0 == btc_lastday_differences_smaller_0
win <- abs(btc_lastday_differences) * direction_ok
no_win <- win == 0
lose <- abs(btc_lastday_differences) * no_win
profit_df <- merge(btc_prices,
btc_prices_lag1,
fc_xts,fc_differences,
btc_lastday_differences,
fc_differences_smaller_0,
btc_lastday_differences_smaller_0,
direction_ok,
win,
lose)
#save profit result in table for ANOVA
profit_res <- rbind(profit_res, data.frame(profit_dfs_nr=n,
profit=sum(profit_df$win) - sum(profit_df$lose),
arima_size=i-20,
forecast_days=20,
window_week_start_day=j,
first_forecast_date=as.character(index(first(profit_df))),
last_forecast_date=as.character(index(last(profit_df))),
twitter_sent_regs=regsetname == "Best Twitter Sentiment" || regsetname == "Best Technical Predictors + Best Twitter Sentiment",
btc_tec_regs=regsetname == "Best Technical Predictors" || regsetname == "Best Technical Predictors + Best Twitter Sentiment"))
profit_dfs[[n]] <- profit_df
n <- n + 1
}
}
}
